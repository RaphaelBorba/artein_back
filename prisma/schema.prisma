generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  username  String   @unique
  password  String
  email     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roleId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Restrict)
}

model GeneralRegister {
  id           Int       @id @default(autoincrement())
  fullName     String
  photo        String?
  personType   String?
  birthDate    DateTime?
  nationality  String?
  placeOfBirth String?

  maritalStatusId Int?
  maritalStatus   MaritalStatus? @relation(fields: [maritalStatusId], references: [id], onDelete: SetNull)

  cpf         String? @db.Char(11)
  cnpj        String? @db.Char(14)
  companyName String?

  educationLevelId Int?
  educationLevel   EducationLevel? @relation(fields: [educationLevelId], references: [id], onDelete: SetNull)

  profession String?
  workplace  String?
  currentJob String?

  phoneNumber      String?   @db.VarChar(15)
  email            String?
  firstContactDate DateTime?

  cep          String? @db.Char(8)
  address      String?
  city         String?
  neighborhood String?
  state        String?
  complement   String?
  country      String?
  countryCode  Int?

  religion String?

  genderId Int?
  gender   Gender? @relation(fields: [genderId], references: [id], onDelete: SetNull)

  status              Boolean?
  isPatient           Boolean?
  isStudent           Boolean?
  interestedInCourses Boolean?

  receiveInfoMethodId Int?
  receiveInfoMethod   CommunicationMethod? @relation(fields: [receiveInfoMethodId], references: [id], onDelete: SetNull)

  additionalInfo String?

  referralSourceId Int?
  referralSource   ReferralSource? @relation(fields: [referralSourceId], references: [id], onDelete: SetNull)

  otherReferral  String?
  referredByName String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Patients Patients[]
  presenceLists PresenceList[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model MaritalStatus {
  id   Int    @id @default(autoincrement())
  name String @unique

  GeneralRegister GeneralRegister[]
}

model EducationLevel {
  id   Int    @id @default(autoincrement())
  name String @unique

  GeneralRegister GeneralRegister[]
}

model ReferralSource {
  id   Int    @id @default(autoincrement())
  name String @unique

  GeneralRegister GeneralRegister[]
}

model CommunicationMethod {
  id   Int    @id @default(autoincrement())
  name String @unique

  GeneralRegister GeneralRegister[]
}

model Gender {
  id   Int    @id @default(autoincrement())
  name String @unique

  GeneralRegister GeneralRegister[]
}

model Patients {
  id Int @id @default(autoincrement())

  generalRegisterId Int             @unique
  generalRegister   GeneralRegister @relation(fields: [generalRegisterId], references: [id], onDelete: Cascade )

  attendanceType                       String?
  attendanceLocation                   String?
  familyOfOrigin                       String?
  currentFamily                        String?
  peopleInHousehold                    Int?
  previousPsychotherapyTreatment       Boolean?
  psychotherapyTreatmentDetails        String?
  pastPsychiatricTreatment             Boolean?
  pastPsychiatricTreatmentDate         DateTime?
  currentPsychiatricTreatment          Boolean?
  currentPsychiatricTreatmentStartDate DateTime?
  psychiatrist                         String?
  psychiatristPhone                    String?
  currentMedications                   String?
  medicationDiagnosis                  String?
  generalMedicalTreatment              Boolean?
  generalMedicalTreatmentDetails       String?
  nonPsychiatricMedications            String?
  ongoingLegalProcess                  Boolean?
  legalProcessDetails                  String?
  reasonForSeekingHelp                 String?

  psychologicalDisorders PsychologicalDisorders[]

  observations                      String?
  physicalAndMentalDevelopment      String?
  educationalAndProfessionalHistory String?
  familyAndAffectiveHistory         String?
  patientComplaintHistory           String?
  therapyExpectations               String?
  medicalRecord                     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PsychologicalDisorders {
  id   Int    @id @default(autoincrement())
  name String @unique

  Patients Patients[]
}

model Course {
  id                Int       @id @default(autoincrement())
  name              String?
  description       String?
  workload          String?
  price             Decimal?  @db.Decimal(10,2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model CourseClass {
  id             Int        @id @default(autoincrement())
  name           String?
  workload       String?
  classNumber    String?
  location       String?
  address        String?
  sessionDates   DateTime[]
  startDate      DateTime?
  endDate        DateTime?
  startTime      String?
  endTime        String?
  daysOfWeek     String[]
  shift          String?
  price          Decimal?   @db.Decimal(10,2)

  presenceLists PresenceList[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PresenceList {
  id                Int      @id @default(autoincrement())
  courseName        String?
  price             Decimal? @db.Decimal(10,2)
  presence          DateTime[]
  foul              DateTime[]
  replacement       DateTime[]
  observations      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  generalRegisterId Int
  generalRegister   GeneralRegister @relation(fields: [generalRegisterId], references: [id], onDelete: Cascade)

  courseClassId     Int
  courseClass       CourseClass @relation(fields: [courseClassId], references: [id], onDelete: Cascade)
}
